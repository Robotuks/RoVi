
void adaptiveMedianFilter(Mat& src)
{

    int maskSize = 3;
    int maxMaskSize=11;
    Mat img =src.clone(); //Image we're filtering
    Mat dest = src.clone();
    int xMax = img.rows-(maskSize-1)/2;     //These integers asures that we dont acces the image outside of it's borders
    int yMax = img.cols-(maskSize-1)/2;    //(masksize-1)-2 is due to the 1 pixel in the center we are looking at, and divide by two as only the mask part facing the border is the problem
    vector<int> medianVec;
    int median;
    int medianIndex = (maskSize*maskSize-1)/2; //The minus one is due to the index at vectors starting at 0
    for (int x = (maskSize-1)/2; x <= xMax; x++) //These 2 for loops go through all of the picture
        for (int y = (maskSize-1)/2; y<= yMax; y++)
        {
            for(int maskX = -(maskSize-1)/2; maskX <= (maskSize-1)/2; maskX++) //Looping through the mask
                for(int maskY = -(maskSize-1)/2; maskY <= (maskSize-1)/2; maskY++)
                {
                    medianVec.push_back(img.at<uchar>(x+maskX, y+maskY));
                }
            sort(medianVec.begin(), medianVec.begin()+maskSize*maskSize); //Sorting the values in the mask and finding the median
            median = medianVec[medianIndex];

            if (median == 0 || median == 255) //If we still have salt or pepper in the median, we need to increase the mask size
            {
            medianVec.clear();
                while (maskSize <= maxMaskSize) //Keep increasing as long as our mask is under the max size
                {
                    maskSize = maskSize +2;
                    xMax = img.rows-(maskSize-1)/2; //We also need to update our indexes and bounds to not get any errors
                    yMax = img.cols-(maskSize-1)/2;
                    medianIndex = (maskSize*maskSize-1)/2; //The minus one is due to the index at vectors starting at 0
                    for(int maskX = -(maskSize-1)/2; maskX <= (maskSize-1)/2; maskX++) //Looping through the mask
                        for(int maskY = -(maskSize-1)/2; maskY <= (maskSize-1)/2; maskY++)
                        {
                            medianVec.push_back(img.at<uchar>(x+maskX, y+maskY));
                        }
                    sort(medianVec.begin(), medianVec.begin()+maskSize*maskSize); //Sorting the values in the mask and finding the median
                    median = medianVec[medianIndex];
                    medianVec.clear();

                    if(median != 0)
                        if(median != 255)
                            break;

                }
            }
            //Setting our mask size and indexes back to normal
            maskSize = 3;
            xMax = img.rows-(maskSize-1)/2; //We also need to update our indexes and bounds to not get any errors
            yMax = img.cols-(maskSize-1)/2;
            medianIndex = (maskSize*maskSize-1)/2; //The minus one is due to the index at vectors starting at 0
            medianVec.clear();
            dest.at<uchar>(x, y) = median;
        }
    namedWindow("test",WINDOW_NORMAL);
    imshow("test",dest);

}
